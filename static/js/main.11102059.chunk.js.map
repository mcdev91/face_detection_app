{"version":3,"sources":["components/Logo/LogoPng.png","components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/SignIn/SignIn.js","components/Register/Register.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FaceRecognition","imageUrl","box","showImage","className","id","alt","src","width","height","map","item","index","style","top","toprow","right","rightcol","bottom","bottomrow","left","leftcol","key","Navigation","onRouteChange","isSignedIn","display","justifyContent","onClick","SignIn","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","data","setTimeout","alert","this","htmlFor","onChange","type","name","React","Component","Register","Logo","options","max","LogoPng","ImageLinkForm","onInputChange","onButtonSubmit","pressEnter","placeholder","onKeyDown","Rank","app","Clarifai","App","apiKey","particleprams","particles","number","density","enable","value_area","calculateFaceLocation","i","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","console","log","input","keyCode","submitForm","models","predict","FACE_DETECT_MODEL","length","catch","err","route","params","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.11102059.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoPng.4fce0fc3.png\";","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({imageUrl, box, showImage}) => {\r\n    return(\r\n        <div className=\"center ma\">\r\n            <div className='image-container absolute mt2 white'>\r\n                { showImage === true && (\r\n                    <img id='inputimage' alt={\"I'm waiting for Url please Insert it!\"} src={imageUrl} width=\"400px\" height=\"auto\" />\r\n                )\r\n                }\r\n                { showImage === false && (\r\n                    <p className=\"f3\">{'Give it a try!'}</p>\r\n                )\r\n                }\r\n                { box.map((item, index) => (\r\n                    <div className='bounding_box' style={{top: item.toprow, right: item.rightcol, bottom: item.bottomrow, left: item.leftcol}} key={index}></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n    if (isSignedIn) {\r\n        return (\r\n            <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <p className='f3 link dim white pa3 pointer' onClick={() => onRouteChange('signout')}>Sign Out</p>\r\n            </nav>\r\n        );\r\n    } else {\r\n        return (\r\n            <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <p className='f3 link dim white pa3 pointer' onClick={() => onRouteChange('signin')}>Sign In</p>\r\n                <p className='f3 link dim white pa3 pointer' onClick={() => onRouteChange('register')}>Register</p>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            signInEmail: '',\r\n            signInPassword: ''\r\n        }\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState({ signInEmail: event.target.value })\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({ signInPassword: event.target.value })\r\n    }\r\n\r\n    onSubmitSignIn = () => {\r\n        // console.log(this.state);\r\n        fetch('http://localhost:3000/signin', {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                email: this.state.signInEmail,\r\n                password: this.state.signInPassword\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data === 'success') {\r\n                    this.props.onRouteChange('home');\r\n                } else {\r\n                    setTimeout(() => {\r\n                        alert('IN DEVELOPMENT . . .');\r\n                        this.props.onRouteChange('register');\r\n                    }, 1000);\r\n                    return\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { onRouteChange } = this.props;\r\n        return (\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n                <main className=\"pa4 white-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\" />\r\n                        <legend className=\"f1 fw6 ph0 mh0 center\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input\r\n                                onChange={this.onEmailChange}\r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                type=\"email\"\r\n                                name=\"email-address\"\r\n                                id=\"email-address\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input\r\n                                onChange={this.onPasswordChange}\r\n                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                id=\"password\"\r\n\r\n                            />\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <input\r\n                                onClick={this.onSubmitSignIn}\r\n                                className=\"white ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                                type=\"submit\"\r\n                                value=\"Sign in\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"lh-copy mt3\">\r\n                            <p\r\n                                onClick={() => onRouteChange('register')}\r\n                                className=\"f6 link dim white db pointer\">Register</p>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 white-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\" />\r\n                    <legend className=\"f1 fw6 ph0 mh0 center\">Register</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\" id=\"name\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                    </div>\r\n                    <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <input\r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"white ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Register\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport LogoPng from './LogoPng.png';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max: 50 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner\">\r\n                    <img src={LogoPng} alt='logo' />\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit, pressEnter }) => {\r\n    return (\r\n        <div className=\"ma4 mt0\">\r\n            <p className=\"discription-text bold f3 mw6 center white\">\r\n                {'This AI magic will detect faces'}\r\n            </p>\r\n            <p className=\"discription-text f3 mw5 center white\">\r\n                {'Paste image Url'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className=\"form center pa4 br3 shadow-5\">\r\n                    <input\r\n                        className=\"f4 pa2 w-70 center input-container b--white-025\"\r\n                        type='text'\r\n                        onChange={onInputChange}\r\n                        placeholder=\"Paste image url\"\r\n                        onKeyDown={pressEnter}\r\n                    />\r\n                    <button\r\n                        className='w-30 f6 link ph3 pv2 dib white bg-black b--white-025'\r\n                        onClick={onButtonSubmit}>Detect\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div className=''>\r\n            <div className='white f3 '>\r\n                {'User, you rank is...'}\r\n            </div>\r\n            <div className='white f1 '>\r\n                {'#1'}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport SignIn from './components/SignIn/SignIn';\r\nimport Register from './components/Register/Register';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport './App.css';\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '12ad7e15d6e542b889f75d650c185154'\r\n});\r\n\r\nconst particleprams = {\r\n  particles: {\r\n    number: {\r\n      value: 180,\r\n      density: {\r\n        enable: true,\r\n        value_area: 700\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: [],\r\n      route: 'signin',\r\n      isSignedIn: false,\r\n      showImage: false\r\n    }\r\n  }\r\n\r\n// componentDidMount() {\r\n//   fetch('http://localhost:3000/')\r\n//   .then(response => response.json())\r\n//   .then(console.log)\r\n// }\r\n\r\n  calculateFaceLocation = (data, i) => {\r\n    let clarifaiFace = data.outputs[0].data.regions[i].region_info.bounding_box;\r\n    let image = document.getElementById('inputimage');\r\n    let width = Number(image.width);\r\n    let height = Number(image.height);\r\n    return {\r\n      leftcol: clarifaiFace.left_col * width - 10,\r\n      toprow: clarifaiFace.top_row * height - 10,\r\n      rightcol: width - (clarifaiFace.right_col * width + 10),\r\n      bottomrow: height - (clarifaiFace.bottom_row * height + 10)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({\r\n      box: [...this.state.box, box]\r\n    });\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({ input: event.target.value });\r\n  }\r\n\r\n  pressEnter = (event) => {\r\n    if (event.keyCode === 13) {\r\n      this.submitForm();\r\n    }\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.submitForm();\r\n  }\r\n\r\n\r\n  submitForm = () => {\r\n    this.setState({\r\n      box: [],\r\n      imageUrl: this.state.input,\r\n      showImage: true\r\n    });\r\n    app.models.predict(\r\n      Clarifai.FACE_DETECT_MODEL,\r\n      this.state.input)\r\n      .then(response => {\r\n        for (let i = 0; i < response.outputs[0].data.regions.length; i++) {\r\n          this.displayFaceBox(this.calculateFaceLocation(response, i))\r\n        }\r\n      }\r\n      )\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      this.setState({ isSignedIn: false })\r\n    } else if (route === 'home') {\r\n      this.setState({ isSignedIn: true })\r\n    }\r\n    this.setState({ route: route });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles\r\n          className=\"particles\"\r\n          params={particleprams} />\r\n        <Navigation isSignedIn={this.state.isSignedIn} onRouteChange={this.onRouteChange} />\r\n        {\r\n          this.state.route === \"home\"\r\n            ? <div>\r\n              <Logo />\r\n              <Rank />\r\n              <ImageLinkForm\r\n                onInputChange={this.onInputChange}\r\n                onButtonSubmit={this.onButtonSubmit}\r\n                pressEnter={this.pressEnter}\r\n              />\r\n              <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} showImage={this.state.showImage} />\r\n            </div>\r\n            : (\r\n              this.state.route === \"signin\"\r\n                ? <SignIn onRouteChange={this.onRouteChange} />\r\n                : <Register onRouteChange={this.onRouteChange} />\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}