{"version":3,"sources":["components/Logo/LogoPng.png","components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/SignIn/SignIn.js","components/Register/Register.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FaceRecognition","imageUrl","box","className","id","alt","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Navigation","onRouteChange","isSignedIn","display","justifyContent","onClick","SignIn","htmlFor","type","name","value","Register","Logo","options","max","LogoPng","ImageLinkForm","onInputCHange","onButtonSubmit","placeholder","onChange","Rank","app","Clarifai","App","apiKey","ParticlesOptions","particles","number","density","enable","value_area","calculateFaceLocation","data","i","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","console","log","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","length","catch","err","route","this","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.db0b1783.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoPng.4fce0fc3.png\";","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n                <img id='inputImage' alt='img' src={imageUrl} width='500px' height='auto' />\r\n                <div className='bounding_box' style={{ top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol }}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n    if (isSignedIn) {\r\n        return (\r\n            <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <p className='f3 link dim black underline pa3 pointer' onClick={() => onRouteChange('signout')}>Sign Out</p>\r\n            </nav>\r\n        );\r\n    } else {\r\n        return (\r\n            <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <p className='f3 link dim black underline pa3 pointer' onClick={() => onRouteChange('signin')}>Sign In</p>\r\n                <p className='f3 link dim black underline pa3 pointer' onClick={() => onRouteChange('register')}>Register</p>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\n\r\nconst SignIn = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\" />\r\n                    <legend className=\"f1 fw6 ph0 mh0 center\">Sign In</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                    </div>\r\n                    <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <input\r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Sign in\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p\r\n                            onClick={() => onRouteChange('register')}\r\n                            className=\"f6 link dim black db pointer\">Register</p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\" />\r\n                    <legend className=\"f1 fw6 ph0 mh0 center\">Register</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\" id=\"name\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                    </div>\r\n                    <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <input\r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Register\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport LogoPng from './LogoPng.png';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max: 50 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner\">\r\n                    <img src={LogoPng} alt='logo' />\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputCHange, onButtonSubmit }) => {\r\n    return (\r\n        <div>\r\n            <p className='f3'>\r\n                {'This magic will detect faces'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br3 shadow-5'>\r\n                    <input className='f4 pa2 w-70 center' type='text' placeholder='enter image url' onChange={onInputCHange} />\r\n                    <button\r\n                        className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n                        onClick={onButtonSubmit}>\r\n                        {'Detect'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div className=''>\r\n            <div className='white f3 '>\r\n                {'User, you rank is...'}\r\n            </div>\r\n            <div className='white f1 '>\r\n                {'#1'}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank;","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '12ad7e15d6e542b889f75d650c185154'\n});\n\nconst ParticlesOptions = {\n  particles: {\n    number: {\n      value: 200,\n      density: {\n        enable: true,\n        value_area: 900\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false\n    }\n  }\n\n  calculateFaceLocation = (data, i) => {\n    const clarifaiFace = data.outputs[0].data.regions[i].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width - 20,\n      topRow: clarifaiFace.top_row * height - 20,\n      rightCol: width - (clarifaiFace.right_col * width + 20),\n      bottomRow: height - (clarifaiFace.bottom_row * height + 20)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({ box: box })\n  }\n\n  onInputCHange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models.predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input)\n      .then(response => {\n        for (let i = 0; i < response.outputs[0].data.regions.length; i++) {\n          this.displayFaceBox(this.calculateFaceLocation(response, i))\n        }\n      }\n      )\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({ isSignedIn: false })\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true })\n    }\n    this.setState({ route: route });\n  }\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className='App'>\n        <Particles className=\"particles\"\n          params={ParticlesOptions}\n        />\n        <Navigation\n          isSignedIn={isSignedIn}\n          onRouteChange={this.onRouteChange}\n        />\n        {route === 'home' ?\n          <div>\n            <Logo />\n            <Rank />\n            <ImageLinkForm\n              onInputCHange={this.onInputCHange}\n              onButtonSubmit={this.onButtonSubmit}\n\n            />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n          </div>\n          : (\n            route === 'signin'\n              ? <SignIn onRouteChange={this.onRouteChange} />\n              : <Register onRouteChange={this.onRouteChange} />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}